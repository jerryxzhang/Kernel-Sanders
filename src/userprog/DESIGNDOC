                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Tim Menninger <tmenning@caltech.edu>
Jerry Zhang <jerry.zhang@caltech.edu>
FirstName LastName <email@domain.example>

>> Specify how many late tokens you are using on this assignment:  

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  /cs/courses/cs124/teams/KernelSanders.git
   commit <>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			   USER PROGRAMS
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.
   
   Tim 6
   Jerry 15
   Jack 12

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
   
   Tim - Argument passing
   Jerry - exit/exec/wait/denying writes
   Jack - User memory access, sys calls, file descriptor table

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None added.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We iterate through all of the characters in the argued file_name string.
When reading, if we reach a space character immediately after a non-space
character, we change it to ASCII null, marking the end of the argument
string.  When we go from a space character to a non-space character,
we know we found the next argument, store the offset in an array and
increment an argc counter.

We then copy the entire argument/filename string to the stack.  We then
add the starting address of this to each offset in our argv array then
copy that to the stack with a null pointer at the end.  Finally, we put
the pointer within the stack to argv, argc and a dummy return address on
the stack.

We avoid overflowing the stack page by limiting the number of bytes we
put on the stack to PGSIZE.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Pintos implements strtok_r because it is more thread-friendly.  This is
because saveptr is saved on the thread's stack, so if another thread calls
strtok_r, it does not alter the same saveptr.  If strtok were used, this
would not be the case and each thread that calls it would alter the same
saveptr, causing each other thread to lose its spot without knowing.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Parsing the commands in the shell reduces the processing time in the kernel.

If the arguments or file are bad in such a way that would cause one to fail,
it would overall be easier for the computer to recover from a shell crash
than a kernel crash.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In syscall.c, we added
  static struct lock filesys_lock;
to synchronize access between all sys calls which interact with the file system.

we added
  static struct file* open_files[MAX_GLOBAL_FILES];
to track all files opened by processes

In the process struct we added member 
  int files[MAX_FILES];
which tracks all the files opened by the process.

/** A single element in the system process table. */
struct process {
    /** A pointer to the thread structure. Only valid if process is running. */
    struct thread *thread_ptr; 

    /** A buffer storing the process name. **/
    char name[MAX_NAME_LEN + 1];

    /** Ids of this process and its parent. */
    pid_t pid;
    pid_t parent_pid; /** -1 if parent has died. */

    /** A list of pointers to open files **/
    int files[MAX_FILES];

    /** A pointer to this process's executable. */
    struct file* file;

    /** A list of child processes. */
    struct list children;

    /** The return code the process supplies to exit() or -1 if killed by kernel.
     * Only valid if process is not running. */
    int return_code;

    /** Linked list structure. Reused for children list and free_list. */
    struct list_elem elem;

    /** Whether the process is running, or has completed. */
    bool running;

    /** Whether this struct represents a valid process, or is unallocated. */
    bool valid;

    /** Whether the parent process is blocked waiting on this process.  */
    bool blocked;

    /** Whether the process has completed loading */
    bool loaded;

    /** Whether the process successfully loaded */
    bool load_success;

};

struct thread now stores the process pid (or -1 for kernel threads) so it can 
be access anytime by calling thread_current()->pid.

process_table is a global array that provides memory for processes to store their data
free_list is a linked list of struct process that allows for simple memory allocation


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique to a process. In our implementation the static
global array open_files hold pointers to all open files. Each process holds an
array of ints called files which holds indexes into open_files. The file
descriptors given to each process is merely the index into their files array,
which can ultimately be used to locate and manipulate the actualy file.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We wrote 2 function, 

static bool r_valid(uint8_t *uaddr);
static bool w_valid(uint8_t *uaddr);

to check whether a given pointer into user memory is valid for reading or 
writing. These two functions rely on a modification to the page fault handler.
The page fault handler is modified to move eax into eip and  return -1 in eax 
if it was triggered by a kernel process. This is combined with the 2 functions
get_user and put_user given in the instructions to check pointers. Pointers
are first checked for not NULL and below the PHYS_BASE. Then we use get_user
to read a byte from an address and see if it page_faults. r_valid stops here.
w_valid tries to write the byte back into that address to check whether that
page_faults. After checking a pointer with r_valid or w_valid, it can be
safely derefenced and used.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Our implementation doesn't require checking the page table, since we leverage
the mmu and page fault handler.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
A process keeps track of all the information inside its process struct.
When a process starts a child, it adds the child to a list of children
and the child has a pointer to the parent. When the parent waits on the 
child, it checks if the child has finished running. If so, it records
its exit status. If not, it blocks. When the child later exits, it
checks if the parent is blocked on it, and if so, unblocks the parent.
The parent then proceeds since the child has exited.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

The sys call handler always checks all user memory space addresses before 
dereferencing or using it. The sys call handler will terminate the process if 
it finds the address invalid. Generally we try to put these checks before
acquring any resources where possible. Thus, the call will terminate the
process and end before acquring any locks or resources. This is the case with
buffers passed to read and write. We check them before doing anything else.
Else, we just remember to release locks and resources. Such is the case in 
create, where we release filesys_lock at the end.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
The parent process spins off the child thread, and checks if it has 
finished loading. If so, it records the load status. If not, it blocks.
When the child finishes loading, it checks if the parent is blocked
and then unblocks it, allowing the parent to then record the status.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
If P calls wait before before or after C exits, the procedure is 
described above and the wait call frees the process table resource 
associated with C. If P terminates without waiting, it marks on its
remaining children that it is dead. The children then, when they 
exit, automatically free their own process table element. If P
terminates without waiting for C after C exits, P will look through
its list of children for any that have exited and free their process
table elements.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
We thought if was a "neater" and faster approeach. We wanted to leverage the
facilities provided in the computer by the mmu instead of taking a round about
approach of manually checking the the validity of a memory address. There is
also less logic to work through, since the page fault will catch all
inappropriate access.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
One advantage of the design is process isolation. Each process's file
descriptors are completely isolated from those of others. This improves the
robustness of the system. The implementation used fixed size arrays for holding
references both to all open files and to the open files of the process. This
puts a limitation on the max files that can be opened and also forces a space
overhead where the max file numbers is fully utilized.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
We changed pid_t to be the index into the system process table. 
This way, there does not need to be a complex map between tid_t and
process table elements.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

