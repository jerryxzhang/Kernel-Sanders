			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Tim Menninger <tmenninger@caltech.edu>
Jerry Zhang <jerry.zhang@caltech.edu>
FirstName LastName <email@domain.example>

>> Specify how many late tokens you are using on this assignment:  

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

IA32 Manual
elf.pdf
A website on gdb commands
http://wiki.osdev.org/Printing_to_Screen for display functions
http://benpfaff.org/writings/clc/prng.c for a usable prng


			     PC BOOTER
			     =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.
   
   Tim - 14 hours
   Jerry - 12 hours

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
   
   Tim - Implemented Bootloader and interrupts.{c,h}.  Altered keyboard.{c,h}
   and timers.{c,h} to be consistent with interrupts and bootloader.
   
   Jerry - Fixed a bug in the bootloader and implemented the Floppy Bird game.

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			     GAME / DEMO
			     ===========

---- ALGORITHMS ----

>> A1: In 25-30 words or less, what does your PC booter do?

   The booter loads our program into memory then jumps to our program's entry
   point.

>> A2: In 25-30 words or less, how does the user interact with the program?
>> What are the controls?  What should the user try to do?
    Press the spacebar to fly. Try to live for as long as possible by avoiding the obstacles.

---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.
The game keeps track of the positions of pipes and the bird, as well as the score, maxscore, and various other values describing which direction the bird is moving, how long it has to move that direction, and whether the game is started or lost.

---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?

	Interrupt sequence:
		-Looks up interrupt handler in IRQ vector
		-Runs handler in handlers.S
		-handler.S calls handler in C file
			-either keyboard (*) or timer (^)
		-C file returns
		-S file returns
		-code resumes
		
	(*) Keyboard interrupt:
        Checks if the spacebar was pressed. If so it either starts the game or allows the bird to fly up a little.
	
	(^) Timer interrupt:
        Increments a value that is used to seed a prng. Then, redraws the game screen by one timestep.

>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?
The program busy waits only in the main function when it has nothing else to do. The rest of the code is entirely interrupt driven and requires no polling or waiting.

---- RATIONALE ----

>> A6: Why did you choose the project you did?
Floppy bird is fun, addictive, and relatively easy to implement. It is also important to pop culture.

>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)
No.

>> A8: Did you run into any technical or resource limitations in the
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?
There was some vertical tearing in the graphics, so I attempted to optimize the redrawing code to only redraw pixels that change. It helped a little, but did not fix it entirely. I would have preferred having standard libraries available, but I found an isolated source file for a prng and it worked fine for my purposes. 

			     BOOT SECTOR
			     ===========

---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?

   We decided to create a data structure containing the DAP.  After it
   is used, the memory is not reclaimed because it is defined macroscopically.
   Had it been defined on the stack, it could have been reclaimed.

>> B2: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?

   No

---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into
>> memory.  Does it perform one large load, or multiple smaller loads?

   The bootloader calls interrupt 0x13 which loads our program in one large
   load into memory.  The bootloader sets the registers so the BIOS
   "knows" the settings to use when copying.

>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)

   Interrupt 0x13 to copy the code into memory.

			  VIDEO SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)
It uses a text mode, the video buffer starts at the location defined in video.c. The screen contains 25x80 characters, and each character has a value and a foreground and background color. The character is one byte, and each color is 4 bits making the entire buffer 25x80x2 bytes = 4000 bytes.

>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.
The video code does not require and data structures aside from those used to keep game state. The video functions instead contain knowledge of how to draw pieces of the game.

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
The video code only needs to expose a function to draw the background, which is done immediately at the start of the program, and another to redraw the game screen, which is done every few timer interrupts. 


---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?
The display uses extended ascii codes as well as background and foreground colors to faithfully reproduce the feel of the original flappy bird.

			  TIMER SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
The timer manages a counter variable that is used to seed a prng, and allows certain operations to happen every few interrupts.

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
The timer code does not present any functions to the rest of the program other than the interrupt handler.

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?
No.

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?
It may be possible to generate race conditions within the program, but we did not encounter any problems with them during development and they do not seem to be present in the final code.

			KEYBOARD SUBSYSTEM
			==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
None.

>> E2: How do your data structures handle keys with multi-byte scan-codes?
They do not.

---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
The keyboard code offers no abstractions or functions except for the interrupt handler.

>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.
It processes the scan code and takes an action depending on the code. The only information exposed is whether the code was a space key press.

---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?
Possibly, but we encountered no problems.

>> E6: Given how your program handles keyboard events, is there any
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?
Possibly, but we encountered no problems.

---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?
The program does not require a complicated keyboard subsystem. It has a very simple interface.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

   Working on the interrupts gave good insight.  It seems like the rest of
   the code couldn't be written without a thorough understanding of how the
   interrupts worked.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

