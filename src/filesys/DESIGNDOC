                     +-------------------------+
                     |          CS 124         |
                     | PROJECT 6: FILE SYSTEMS |
                     |     DESIGN DOCUMENT     |
                     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jerry Zhang <jerry.zhang@caltech.edu>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

>> Specify how many late tokens you are using on this assignment:  
2

>> What is the Git repository and commit hash for your submission?

   Repository URL:  /cs/courses/cs124/teams/KernelSanders.git
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.
Jerry - 25
Jack - 23

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
Jerry - inode, extensible files, cache concurrency
Jack - Sub directories and related system calls

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

             INDEXED AND EXTENSIBLE FILES
             ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

inode_disk now contains :
block_sector_t direct[NUM_DIRECT];
block_sector_t single_indirect[NUM_SINGLE_INDIRECT];
block_sector_t double_indirect;
These store the data of the multilevel inode structure.

inode now contains struct lock extension lock, to allow 
concurrency in file extension.

struct rw_lock contains:
struct lock r; - allows atomic operations to the entire rw lock
struct semaphore g; - acquired to allow mutual exclusion between readers and writers
struct lock extra; - a special lock that allows atomic upgrades from read to write mode
int b; - tracks the number of readers. the first and last are responsible for the semaphore

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.
our inode has 60 direct blocks, 40 indirect blocks, and 1 double indirect block.
 = 60 * 512 + 40 * 128 * 512 + 1 * 128 * 128 * 512 = 11040768 or around 11 MB

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
a process must acquire extension_lock if its write will go over the end of the file. 

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
When A reads, A cannot read beyond the boundary of length as stored in 
the file inode. B does not update length until its entire write is complete. Thus, A sees all of B's changes in one step.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

Many processes writing to a file are unlikely to block many readers since they all have the same chance of managing to acquire the semaphore. In our implementation, it is possible for a large amount of readers to indefinitely block writers. 

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

The filesystem only supports files up to 8 MB, so no more than 1 double indirect node is needed. The other entries are split arbitrarily between direct and single indirect nodes,with some preference for the faster direct nodes.

                SUBDIRECTORIES
                ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

both the dir_entry struct and the file struct have the member

bool is_dir;

added to indicate if they represent directories. Thus, directory entries can
point to other directories.

process has the member 

struct dir* working_dir; 

added to track its current wokring directory. It points to an open directory.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

The only difference between relative and absolute is the directory that I
start from. If absolute, then the start is ROOT, else it's the working 
directory of the process. From there I try to open the next directory in the
path. If sucessfull, I close the current directory and set the one just opened
to the new current. This "crabbing" is repeated until the last token in the
path. Any error on the way other signals that the path is not valid.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.
We did not implement anything to prevent the race condition.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

our implementation prevents removing directories opened anywhere other than
the instance trying to remove it. At the time of removal, we check that the
open_cnt on the underlyin inode is 1, since dir_remove should be the only
place that inode is open at, else it's still in use elsewhere.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.
It's represented as a pointer to a open directory because it's convenient have
that to be able to quickly reference the directory and access it. As well, by
having it open, we can prevent other processes from removing that directory,
while it's the current working directory of a process.

                 BUFFER CACHE
                 ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?
A process must acquire a write lock on a cache block before eviction can begin.
If the write lock is acquired, this means that no other writers or readers 
are using the block.
>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?
While the eviction process holds the write lock, no other processes can
read or write to it. The process never releases the lock once it is acquired
all the way up to when it is returned to the user, however it does downgrade
to read if the user is only reading. The lock is finally released when the
user indicates the operation is complete.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
