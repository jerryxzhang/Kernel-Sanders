                    +---------------------------+
                    |           CS 124          |
                    | PROJECT 5: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jerry Zhang <jerry.zhang@caltech.edu>
Jack Wang <j.wang@caltech.edu>
Tim Menninger <tmenninger.caltech@gmail.com>

>> Specify how many late tokens you are using on this assignment:  
All of them.

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  /cs/courses/cs124/teams/KernelSanders.git
   commit 2fd10ef

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.
Jerry - 30
Jack - 40
Tim - 20

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
Jerry - Debugging. also pinning, loader, stack growth, eviction
Jack - mmap file, debugging, reorganized syscalls, pinning, rewrote read/write 
       system calls to check permission and pin each page involved and
       read/write to them separately
Tim - swap, supplemental page and frame tables

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in frame.h:

struct frame {
  void *phys_addr;    /* Address of the page */
    struct supp_page *page; /* Supplemental page entry. Since there is 
                               no memory sharing
                               each frame corresponds to at most one page. */
  struct list_elem frame_elem; /* Element for keeping a list of frames */
    int pinned;
    bool evicting;
};
to represent entry in the frame table

in frame.c:
static struct list frame_table;
static struct lock frame_lock;

the actual frame table with synchonization


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
The user virtual address is passed in through a page fault, which is
used to locate the supplemental page table entry, which has a pointer
to the frame with the physical address.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
We avoid the issue by never reading or writing using the kernel virtual
address. The user address is used in syscalls.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
There is a frame table lock that locks whenever the frame allocation 
procedure starts.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
A hash table allows efficient access without taking as much space 
as an array.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in page.h:
struct supp_page {
  struct frame *fr; /* Frame this is in. */
  uint32_t *pd; /* Pagedir associated with this page. */
  void *vaddr; /* Virtual address of associated page. */
    enum page_location_type type; /* Tells how to get page data. */
  bool wr; /* True if the memory is writable.  False otherwise. */
  
  struct hash_elem elem;
    
    /* Only useful for filesys type. */
  struct file *fil; /* Pointer to file. */
  int offset; /* Offset from file start to relevant data. */
  int bytes; /* Number of bytes of relevant data. */
  
  /* Only useful for swap type. */
  struct swap_slot *swap; /* Info about location of data in swap. */
};

to represent the supplemental page table entry

in process.h process struct:

struct hash supp_page_table;

the supplemental page table for the process

in swap.h:
struct swap_slot {
  int slot_num; /* Address of the swap inside the block. */
  bool in_use; /* True if the swap is used, false if the swap is empty. */
};
entry for swap slot book keeping

in swap.c:
static struct block *swap_table;
pointer to point to the swap block device

static struct swap_slot *swap_slots;
pointer to the swap table

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
The code implements second chance fifo. Frames are kept in a linked
list. The first element is popped, checked if it is accessed, and if
it is, it is readded with the access bit reset. Otherwise, it is 
evicted.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
Each process has its own supplemental page table. When P obtains the frame,
the entry in Q's table is updated to have no frame.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
If the pointer is below PHYS_BASE but above esp - 64, it is a valid
stack access.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
The is only one lock in the VM system, which is the one on the 
frame table. This means deadlock is not possible. There is no
need for locks on individual tables since each process has its 
separate table.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
Actions on the frame table cannot overlap because of the frame 
table lock. Q can access the page until it is unmapped, at which
point it can trigger a fault handler which must wait for 
eviction to finish before faulting the page back in.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
Actions on the frame table cannot overlap because of the frame table
lock.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?
During the read and write syscalls, each page of the buffer that is 
passed in is either paged in or allocated as stack growth, and then 
pinned. The pages cannot be paged out while pinned, and are unpinned
after the read / write call.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make synchronization
>> easy, but limit parallelism.  On the other hand, using many locks
>> complicates synchronization and raises the possibility for deadlock
>> but allows for high parallelism.  Explain where your design falls
>> along this continuum and why you chose to design it this way.
We used a single lock for the frame table. The alternative would
be a lock for every single frame which would have been excessively 
complex.

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in syscall.h:
typedef int mapid_t;
for mmap file id


in syscall.c:

struct mmapping {
    void* addr;
    struct file *file;
};

static struct mmapping all_mmappings[MAX_GLOBAL_MAPPINGS];
static struct lock mmap_lock;

to track all mmapings created

in process.h process struct:

int mmappings[MAX_MMAPPINGS];

to track mmappings of the process


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
When a files is mapped into memory, supplemental page table entries are
created for the memory section which points to the file mapped as the backing
file and the page directory is also update to point to the file. When a fault
occurs, the supplemental page table is consulted, the page will be put into
frame. If the page is swap, the frame will be populated with the swap data.
If it's mmaped file, it will populated with the file data.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
We check the supplemental page table to see if anything is mapped there.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
The demand paging requires a bit more book keeping and management than the
memory mapped files. The memory backed files are already mananged by the
file system, so we just use those facilities provided. We manage swap
directly on the block device rather than as files, since files are more
overhead than necessary.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

