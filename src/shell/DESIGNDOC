			+------------------+
			|      CS 124      |
			| PROJECT 1: SHELL |
			|  DESIGN DOCUMENT |
			+------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jack Wang <j.wang@caltech.edu>
Jerry Zhang <jerry.zhang@caltech.edu>
FirstName LastName <email@domain.example>

>> Specify how many late tokens you are using on this assignment: 0 

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: /cs/courses/cs124/teams/KernelSanders.git 
   commit 3046b63

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please include them here.
multiline commands, readline and history, and !n

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.
c and linux documentation, lots of googling lex/yacc stuff

			   COMMAND SHELL
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Jack Wang: 5

Jerry Zhang: 9

Tim Menninger:


>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Jack Wang: Implementing CD, redirecting, and piping.

Jerry Zhang: Implementing the parser, project skeleton, and forking children

Tim Menninger:


---- DATA STRUCTURES ----

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?
The command is parsed with a bison parser that recognizes a single command as being a series of words followed by an optional < or > followed by a word. Then, a series of commands can exist with the pipe character between them. Each command is represented as a struct containing the program name, any args, any input / output files, and a pointer to the command to pipe to. The input/output as well as next command may be NULL. The command is then executed by retrieving the data in the
struct, loading any files or pipes necessary, forking and execing, and then calling the function recursively on the next command while passing the pipe along.

>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.
This uses the same process described above. 


---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.

The command shell parses the command and forks off a child process. In the
child process, inp.txt is opened and duped in to STDIN and out.txt is
opened and duped into STDOUT. Process a is then ran in the child process
using execvp. The command shell moves on once the child process is reaped.

>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

The command shell first creates a pipe (pipe 1), then forks off a child process
for a. In the process for a, pipe 1's write end is duped in to STDOUT. The
process then runs a with execvp. Meanwhile the command shell creates another
pipe (pipe 2) and forks off another process for b. In the process for b,
pipe 1's read end is duped into STDIN and pipe 2's write end is duped into
STDOUT. Then the process runs b with execvp. The command shell forks a third
time for c. In the process for c, pipe 2's read end is duped into STDIN and c
is run with execvp.

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

The command shell process spawns all the child process for a, b, and c. After
spawning all 3 process as described in A4, the command shell process calls
wait() until all child processes are finished.  Wait reaps the processes.

>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

The procedure is the same as in A4 execept that in the process running a
intp.txt is opened and duped into STDIN before a is run and in the process
running c out.txt is opened and duped into STDOUT before c is run.

---- RATIONALE ----

>> A7: Why must the chdir and exit commands be implemented as built-in
>> functions, rather than external programs?
They modify the state of the terminal, therefore, no external program could provide that functionality.

>> A8: Why did you ultimately choose this design?  In what ways is it
>> superior to other designs you considered as you developed your solution?
For the parser, we considered using the string functions directly before deciding on a lex/yacc parser. There were some issues with setting up lex/yacc but ultimately they make the parsing code easy to understand and modify, which is an advantage.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

